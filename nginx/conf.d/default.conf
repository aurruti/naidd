# duckdns HTTP to HTTPS redirect
server {
    listen 80;
    server_name naidd.duckdns.org;
    
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# duckdns HTTPS traffic
server {
    listen 443 ssl;
    server_name naidd.duckdns.org;

    ssl_certificate /etc/letsencrypt/live/naidd.duckdns.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/naidd.duckdns.org/privkey.pem;
    
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;

    location / {
        proxy_pass http://website:80;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}

# # Redirect HTTP to HTTPS
# server {
#     listen 80;
#     server_name aurruti.cat www.aurruti.cat;

#     location /.well-known/acme-challenge/ {
#         root /var/www/certbot;
#     }

#     return 301 https://www.aurruti.cat$request_uri;
# }


# # Handle HTTPS traffic
# server {
#     listen 443 ssl;
#     server_name aurruti.cat www.aurruti.cat;

#     # SSL certificate paths
#     ssl_certificate /etc/letsencrypt/live/aurruti.cat/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/aurruti.cat/privkey.pem;

#     # Redirect root domain to www
#     if ($host = aurruti.cat) {
#         return 301 https://www.aurruti.cat$request_uri;
#     }

#     location / {
#         proxy_pass http://website;
#         proxy_set_header Host $host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }